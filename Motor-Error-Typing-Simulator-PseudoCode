SEQUENCE MAIN_PROGRAM
    INITIALIZE GUI_WINDOW
    INITIALIZE INPUT_FILE_FIELD
    INITIALIZE OUTPUT_FILE_FIELD
    INITIALIZE ERROR_PROBABILITIES_FIELDS
    CREATE BUTTON "SIMULATE" WITH ACTION SIMULATE_TEXT
END SEQUENCE

SEQUENCE SIMULATE_TEXT
    IF-THEN-ELSE INPUT_FILE OR OUTPUT_FILE IS EMPTY
        THEN SHOW ERROR "SELECT FILES"
        ELSE
            CALL PROCESS_FILE(INPUT_FILE, OUTPUT_FILE, MISS_PROB, REPEAT_PROB, SUBSTITUTE_PROB, TRANSPOSE_PROB)
            SHOW MESSAGE "SIMULATION COMPLETE"
    END IF
END SEQUENCE

SEQUENCE PROCESS_FILE(INPUT_PATH, OUTPUT_PATH, MISS_PROB, REPEAT_PROB, SUBSTITUTE_PROB, TRANSPOSE_PROB)
    OPEN INPUT_PATH AS TEXT_FILE
    READ ENTIRE TEXT INTO TEXT
    SPLIT TEXT INTO PARAGRAPHS BY NEWLINE
    SEQUENCE FOR EACH PARAGRAPH IN PARAGRAPHS
        IF-THEN-ELSE PARAGRAPH IS EMPTY
            THEN CONTINUE TO NEXT PARAGRAPH
            ELSE
                EXTRACT WORDS FROM PARAGRAPH INTO WORD_LIST
                SEQUENCE FOR EACH WORD IN WORD_LIST
                    IF-THEN-ELSE WORD IS ALPHABETIC
                        THEN
                            SIMULATED_WORD = CALL SIMULATE_MOTOR_ERROR(WORD, MISS_PROB, REPEAT_PROB, SUBSTITUTE_PROB, TRANSPOSE_PROB)
                        ELSE
                            SIMULATED_WORD = WORD
                    END IF
                    ADD SIMULATED_WORD TO SIMULATED_WORD_LIST
                END SEQUENCE
                JOIN SIMULATED_WORD_LIST WITH SPACES INTO SIMULATED_PARAGRAPH
                FIX PUNCTUATION SPACING IN SIMULATED_PARAGRAPH
                COMPUTE STATISTICS FOR ORIGINAL AND SIMULATED PARAGRAPH
                ADD DATA TO OUTPUT_LIST
        END IF
    END SEQUENCE
    WRITE OUTPUT_LIST TO CSV FILE OUTPUT_PATH
END SEQUENCE

SEQUENCE SIMULATE_MOTOR_ERROR(WORD, MISS_PROB, REPEAT_PROB, SUBSTITUTE_PROB, TRANSPOSE_PROB)
    INITIALIZE NEW_WORD AS EMPTY
    SET INDEX I TO 0
    WHILE I < LENGTH OF WORD
        CHAR = WORD[I]
        IF-THEN-ELSE RANDOM() < MISS_PROB
            THEN INCREMENT I AND CONTINUE
        END IF
        IF RANDOM() < REPEAT_PROB
            THEN ADD CHAR TO NEW_WORD
        END IF
        IF-THEN-ELSE RANDOM() < SUBSTITUTE_PROB AND CHAR IN KEYBOARD_ADJACENT
            THEN CHAR = RANDOM_CHOICE(KEYBOARD_ADJACENT[CHAR])
        END IF
        ADD CHAR TO NEW_WORD
        IF RANDOM() < TRANSPOSE_PROB AND I < LENGTH OF WORD - 1
            THEN
                NEXT_CHAR = WORD[I+1]
                SWAP CHAR AND NEXT_CHAR
                ADD NEXT_CHAR TO NEW_WORD
                INCREMENT I BY 1
        END IF
        INCREMENT I BY 1
    END WHILE
    RETURN CONCATENATION OF NEW_WORD
END SEQUENCE

SEQUENCE COMPUTE_STATISTICS(TEXT)
    EXTRACT WORDS FROM TEXT INTO WORD_LIST
    WORD_COUNT = LENGTH OF WORD_LIST
    SENTENCE_COUNT = COUNT OF SENTENCES IN TEXT
    CHAR_COUNT = LENGTH OF TEXT
    IF WORD_COUNT > 0
        THEN AVG_WORD_LENGTH = SUM(LENGTH OF EACH WORD)/WORD_COUNT
        ELSE AVG_WORD_LENGTH = 0
    END IF
    RETURN WORD_COUNT, SENTENCE_COUNT, CHAR_COUNT, AVG_WORD_LENGTH
END SEQUENCE
